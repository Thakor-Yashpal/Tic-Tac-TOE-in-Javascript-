{"version":3,"sources":["Tic-Tac-Toe.js"],"names":["sumArray","array","sum","i","length","isInArray","element","indexOf","shuffleArray","temp","index","counter","floor","Math","random","intRandom","min","max","rand","document","onkeypress","evt","window","event","modal","getElementsByClassName","keyCode","onclick","moves","winner","x","o","player","computer","whoseTurn","ties","gameOver","score","xText","oText","Grid","playerText","initialize","myGrid","diagV","freeCells","cells","setTimeout","showOptions","assignRoles","askUser","getElementById","addEventListener","makePlayerX","makePlayerO","style","display","removeEventListener","computerText","cellClicked","id","toString","idName","innerHTML","transform","cursor","checkWin","cell","restartGame","ask","confirm","reset","classList","remove","makeComputerMove","response","myArr","corners","getFirstWithTwoInARow","difficulty","row","getRowValues","j","tmpAr","str","add","col","getColumnValues","getColumnIndices","endGame","getDiagValues","diagonal","getDiagIndices","getFreeCellIndices","text","checked","diffs","getElementsByName","parseInt","value","closeModal","who","getOptions","prototype","Array","this","resultArray","console","getRowIndices","error","push","undefined","slice","column","arg","agent","rowV","rowI","colV","colI","diagI"],"mappings":"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","file":"Tic-Tac-Toe.min.js","sourcesContent":["document.onkeypress = function(evt) {\r\n    evt = evt || window.event;\r\n    let modal = document.getElementsByClassName(\"modal\")[0];\r\n    if (evt.keyCode === 27) {\r\n        modal.style.display = \"none\";\r\n    }\r\n};\r\n\r\n\r\nwindow.onclick = function(evt) {\r\n    let modal = document.getElementsByClassName(\"modal\")[0];\r\n    if (evt.target === modal) {\r\n        modal.style.display = \"none\";\r\n    }\r\n};\r\n\r\n\r\nfunction sumArray(array) {\r\n    let sum = 0,\r\n        i = 0;\r\n    for (i = 0; i < array.length; i++) {\r\n        sum += array[i];\r\n    }\r\n    return sum;\r\n}\r\n\r\nfunction isInArray(element, array) {\r\n    if (array.indexOf(element) > -1) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction shuffleArray(array) {\r\n    let counter = array.length,\r\n        temp,\r\n        index;\r\n    while (counter > 0) {\r\n        index = Math.floor(Math.random() * counter);\r\n        counter--;\r\n        temp = array[counter];\r\n        array[counter] = array[index];\r\n        array[index] = temp;\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction intRandom(min, max) {\r\n    let rand = min + Math.random() * (max + 1 - min);\r\n    return Math.floor(rand);\r\n}\r\n\r\n// GLOBAL VARIABLES\r\nlet moves = 0,\r\n    winner = 0,\r\n    x = 1,\r\n    o = 3,\r\n    player = x,\r\n    computer = o,\r\n    whoseTurn = x,\r\n    gameOver = false,\r\n    score = {\r\n        ties: 0,\r\n        player: 0,\r\n        computer: 0\r\n    },\r\n    xText = \"<span class=\\\"x\\\">&times;</class>\",\r\n    oText = \"<span class=\\\"o\\\">o</class>\",\r\n    playerText = xText,\r\n    computerText = oText,\r\n    difficulty = 1,\r\n    myGrid = null;\r\n\r\n\r\nfunction Grid() {\r\n    this.cells = new Array(9);\r\n}\r\n\r\n\r\nGrid.prototype.getFreeCellIndices = function() {\r\n    let i = 0,\r\n        resultArray = [];\r\n    for (i = 0; i < this.cells.length; i++) {\r\n        if (this.cells[i] === 0) {\r\n            resultArray.push(i);\r\n        }\r\n    }\r\n\r\n    return resultArray;\r\n};\r\n\r\n\r\nGrid.prototype.getRowValues = function(index) {\r\n    if (index !== 0 && index !== 1 && index !== 2) {\r\n        console.error(\"Wrong arg for getRowValues!\");\r\n        return undefined;\r\n    }\r\n    let i = index * 3;\r\n    return this.cells.slice(i, i + 3);\r\n};\r\n\r\n\r\nGrid.prototype.getRowIndices = function(index) {\r\n    if (index !== 0 && index !== 1 && index !== 2) {\r\n        console.error(\"Wrong arg for getRowIndices!\");\r\n        return undefined;\r\n    }\r\n    let row = [];\r\n    index = index * 3;\r\n    row.push(index);\r\n    row.push(index + 1);\r\n    row.push(index + 2);\r\n    return row;\r\n};\r\n\r\n// get a column (values)\r\nGrid.prototype.getColumnValues = function(index) {\r\n    if (index !== 0 && index !== 1 && index !== 2) {\r\n        console.error(\"Wrong arg for getColumnValues!\");\r\n        return undefined;\r\n    }\r\n    let i, column = [];\r\n    for (i = index; i < this.cells.length; i += 3) {\r\n        column.push(this.cells[i]);\r\n    }\r\n    return column;\r\n};\r\n\r\n// get a column (indices)\r\nGrid.prototype.getColumnIndices = function(index) {\r\n    if (index !== 0 && index !== 1 && index !== 2) {\r\n        console.error(\"Wrong arg for getColumnIndices!\");\r\n        return undefined;\r\n    }\r\n    let i, column = [];\r\n    for (i = index; i < this.cells.length; i += 3) {\r\n        column.push(i);\r\n    }\r\n    return column;\r\n};\r\n\r\n// get diagonal cells\r\n// arg 0: from top-left\r\n// arg 1: from top-right\r\nGrid.prototype.getDiagValues = function(arg) {\r\n    let cells = [];\r\n    if (arg !== 1 && arg !== 0) {\r\n        console.error(\"Wrong arg for getDiagValues!\");\r\n        return undefined;\r\n    } else if (arg === 0) {\r\n        cells.push(this.cells[0]);\r\n        cells.push(this.cells[4]);\r\n        cells.push(this.cells[8]);\r\n    } else {\r\n        cells.push(this.cells[2]);\r\n        cells.push(this.cells[4]);\r\n        cells.push(this.cells[6]);\r\n    }\r\n    return cells;\r\n};\r\n\r\n// get diagonal cells\r\n// arg 0: from top-left\r\n// arg 1: from top-right\r\nGrid.prototype.getDiagIndices = function(arg) {\r\n    if (arg !== 1 && arg !== 0) {\r\n        console.error(\"Wrong arg for getDiagIndices!\");\r\n        return undefined;\r\n    } else if (arg === 0) {\r\n        return [0, 4, 8];\r\n    } else {\r\n        return [2, 4, 6];\r\n    }\r\n};\r\n\r\n\r\nGrid.prototype.getFirstWithTwoInARow = function(agent) {\r\n    if (agent !== computer && agent !== player) {\r\n        console.error(\"Function getFirstWithTwoInARow accepts only player or computer as argument.\");\r\n        return undefined;\r\n    }\r\n    let sum = agent * 2,\r\n        freeCells = shuffleArray(this.getFreeCellIndices());\r\n    for (let i = 0; i < freeCells.length; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            let rowV = this.getRowValues(j);\r\n            let rowI = this.getRowIndices(j);\r\n            let colV = this.getColumnValues(j);\r\n            let colI = this.getColumnIndices(j);\r\n            if (sumArray(rowV) == sum && isInArray(freeCells[i], rowI)) {\r\n                return freeCells[i];\r\n            } else if (sumArray(colV) == sum && isInArray(freeCells[i], colI)) {\r\n                return freeCells[i];\r\n            }\r\n        }\r\n        for (j = 0; j < 2; j++) {\r\n            let diagV = this.getDiagValues(j);\r\n            let diagI = this.getDiagIndices(j);\r\n            if (sumArray(diagV) == sum && isInArray(freeCells[i], diagI)) {\r\n                return freeCells[i];\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nGrid.prototype.reset = function() {\r\n    for (let i = 0; i < this.cells.length; i++) {\r\n        this.cells[i] = 0;\r\n    }\r\n    return true;\r\n};\r\n\r\nfunction initialize() {\r\n    myGrid = new Grid();\r\n    moves = 0;\r\n    winner = 0;\r\n    gameOver = false;\r\n    whoseTurn = player; // default, this may change\r\n    for (let i = 0; i <= myGrid.cells.length - 1; i++) {\r\n        myGrid.cells[i] = 0;\r\n    }\r\n    // setTimeout(assignRoles, 500);\r\n    setTimeout(showOptions, 500);\r\n\r\n}\r\n\r\n// Ask player if they want to play as X or O. X goes first.\r\nfunction assignRoles() {\r\n    askUser(\"Do you want to go first?\");\r\n    document.getElementById(\"yesBtn\").addEventListener(\"click\", makePlayerX);\r\n    document.getElementById(\"noBtn\").addEventListener(\"click\", makePlayerO);\r\n}\r\n\r\nfunction makePlayerX() {\r\n    player = x;\r\n    computer = o;\r\n    whoseTurn = player;\r\n    playerText = xText;\r\n    computerText = oText;\r\n    document.getElementById(\"userFeedback\").style.display = \"none\";\r\n    document.getElementById(\"yesBtn\").removeEventListener(\"click\", makePlayerX);\r\n    document.getElementById(\"noBtn\").removeEventListener(\"click\", makePlayerO);\r\n}\r\n\r\nfunction makePlayerO() {\r\n    player = o;\r\n    computer = x;\r\n    whoseTurn = computer;\r\n    playerText = oText;\r\n    computerText = xText;\r\n    setTimeout(makeComputerMove, 400);\r\n    document.getElementById(\"userFeedback\").style.display = \"none\";\r\n    document.getElementById(\"yesBtn\").removeEventListener(\"click\", makePlayerX);\r\n    document.getElementById(\"noBtn\").removeEventListener(\"click\", makePlayerO);\r\n}\r\n\r\n// executed when player clicks one of the table cells\r\nfunction cellClicked(id) {\r\n\r\n    let idName = id.toString();\r\n    let cell = parseInt(idName[idName.length - 1]);\r\n    if (myGrid.cells[cell] > 0 || whoseTurn !== player || gameOver) {\r\n        // cell is already occupied or something else is wrong\r\n        return false;\r\n    }\r\n    moves += 1;\r\n    document.getElementById(id).innerHTML = playerText;\r\n    // randomize orientation (for looks only)\r\n    let rand = Math.random();\r\n    if (rand < 0.3) {\r\n        document.getElementById(id).style.transform = \"rotate(180deg)\";\r\n    } else if (rand > 0.6) {\r\n        document.getElementById(id).style.transform = \"rotate(90deg)\";\r\n    }\r\n    document.getElementById(id).style.cursor = \"default\";\r\n    myGrid.cells[cell] = player;\r\n    // Test if we have a winner:\r\n    if (moves >= 5) {\r\n        winner = checkWin();\r\n    }\r\n    if (winner === 0) {\r\n        whoseTurn = computer;\r\n        makeComputerMove();\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction restartGame(ask) {\r\n    if (moves > 0) {\r\n        var response = confirm(\"Are you sure you want to start over?\");\r\n        if (response === false) {\r\n            return;\r\n        }\r\n    }\r\n    gameOver = false;\r\n    moves = 0;\r\n    winner = 0;\r\n    whoseTurn = x;\r\n    myGrid.reset();\r\n    for (var i = 0; i <= 8; i++) {\r\n        var id = \"cell\" + i.toString();\r\n        document.getElementById(id).innerHTML = \"\";\r\n        document.getElementById(id).style.cursor = \"pointer\";\r\n        document.getElementById(id).classList.remove(\"win-color\");\r\n    }\r\n    if (ask === true) {\r\n        // setTimeout(assignRoles, 200);\r\n        setTimeout(showOptions, 200);\r\n    } else if (whoseTurn == computer) {\r\n        setTimeout(makeComputerMove, 800);\r\n    }\r\n}\r\n\r\n// The core logic of the game AI:\r\nfunction makeComputerMove() {\r\n    // debugger;\r\n    if (gameOver) {\r\n        return false;\r\n    }\r\n    let cell = -1,\r\n        myArr = [],\r\n        corners = [0, 2, 6, 8];\r\n    if (moves >= 3) {\r\n        cell = myGrid.getFirstWithTwoInARow(computer);\r\n        if (cell === false) {\r\n            cell = myGrid.getFirstWithTwoInARow(player);\r\n        }\r\n        if (cell === false) {\r\n            if (myGrid.cells[4] === 0 && difficulty == 1) {\r\n                cell = 4;\r\n            } else {\r\n                myArr = myGrid.getFreeCellIndices();\r\n                cell = myArr[intRandom(0, myArr.length - 1)];\r\n            }\r\n        }\r\n        // Avoid a catch-22 situation:\r\n        if (moves == 3 && myGrid.cells[4] == computer && player == x && difficulty == 1) {\r\n            if (myGrid.cells[7] == player && (myGrid.cells[0] == player || myGrid.cells[2] == player)) {\r\n                myArr = [6, 8];\r\n                cell = myArr[intRandom(0, 1)];\r\n            } else if (myGrid.cells[5] == player && (myGrid.cells[0] == player || myGrid.cells[6] == player)) {\r\n                myArr = [2, 8];\r\n                cell = myArr[intRandom(0, 1)];\r\n            } else if (myGrid.cells[3] == player && (myGrid.cells[2] == player || myGrid.cells[8] == player)) {\r\n                myArr = [0, 6];\r\n                cell = myArr[intRandom(0, 1)];\r\n            } else if (myGrid.cells[1] == player && (myGrid.cells[6] == player || myGrid.cells[8] == player)) {\r\n                myArr = [0, 2];\r\n                cell = myArr[intRandom(0, 1)];\r\n            }\r\n        } else if (moves == 3 && myGrid.cells[4] == player && player == x && difficulty == 1) {\r\n            if (myGrid.cells[2] == player && myGrid.cells[6] == computer) {\r\n                cell = 8;\r\n            } else if (myGrid.cells[0] == player && myGrid.cells[8] == computer) {\r\n                cell = 6;\r\n            } else if (myGrid.cells[8] == player && myGrid.cells[0] == computer) {\r\n                cell = 2;\r\n            } else if (myGrid.cells[6] == player && myGrid.cells[2] == computer) {\r\n                cell = 0;\r\n            }\r\n        }\r\n    } else if (moves === 1 && myGrid.cells[4] == player && difficulty == 1) {\r\n        // if player is X and played center, play one of the corners\r\n        cell = corners[intRandom(0, 3)];\r\n    } else if (moves === 2 && myGrid.cells[4] == player && computer == x && difficulty == 1) {\r\n        // if player is O and played center, take two opposite corners\r\n        if (myGrid.cells[0] == computer) {\r\n            cell = 8;\r\n        } else if (myGrid.cells[2] == computer) {\r\n            cell = 6;\r\n        } else if (myGrid.cells[6] == computer) {\r\n            cell = 2;\r\n        } else if (myGrid.cells[8] == computer) {\r\n            cell = 0;\r\n        }\r\n    } else if (moves === 0 && intRandom(1, 10) < 8) {\r\n\r\n        cell = corners[intRandom(0, 3)];\r\n    } else {\r\n        // choose the center of the board if possible\r\n        if (myGrid.cells[4] === 0 && difficulty == 1) {\r\n            cell = 4;\r\n        } else {\r\n            myArr = myGrid.getFreeCellIndices();\r\n            cell = myArr[intRandom(0, myArr.length - 1)];\r\n        }\r\n    }\r\n    let id = \"cell\" + cell.toString();\r\n    // console.log(\"computer chooses \" + id);\r\n    document.getElementById(id).innerHTML = computerText;\r\n    document.getElementById(id).style.cursor = \"default\";\r\n\r\n    let rand = Math.random();\r\n    if (rand < 0.3) {\r\n        document.getElementById(id).style.transform = \"rotate(180deg)\";\r\n    } else if (rand > 0.6) {\r\n        document.getElementById(id).style.transform = \"rotate(90deg)\";\r\n    }\r\n    myGrid.cells[cell] = computer;\r\n    moves += 1;\r\n    if (moves >= 5) {\r\n        winner = checkWin();\r\n    }\r\n    if (winner === 0 && !gameOver) {\r\n        whoseTurn = player;\r\n    }\r\n}\r\n\r\n// Check if the game is over and determine winner\r\nfunction checkWin() {\r\n    winner = 0;\r\n\r\n    // rows\r\n    for (let i = 0; i <= 2; i++) {\r\n        let row = myGrid.getRowValues(i);\r\n        if (row[0] > 0 && row[0] == row[1] && row[0] == row[2]) {\r\n            if (row[0] == computer) {\r\n                score.computer++;\r\n                winner = computer;\r\n                // console.log(\"computer wins\");\r\n            } else {\r\n                score.player++;\r\n                winner = player;\r\n                // console.log(\"player wins\");\r\n            }\r\n\r\n            let tmpAr = myGrid.getRowIndices(i);\r\n            for (let j = 0; j < tmpAr.length; j++) {\r\n                let str = \"cell\" + tmpAr[j];\r\n                document.getElementById(str).classList.add(\"win-color\");\r\n            }\r\n            setTimeout(endGame, 1000, winner);\r\n            return winner;\r\n        }\r\n    }\r\n\r\n    // columns\r\n    for (i = 0; i <= 2; i++) {\r\n        let col = myGrid.getColumnValues(i);\r\n        if (col[0] > 0 && col[0] == col[1] && col[0] == col[2]) {\r\n            if (col[0] == computer) {\r\n                score.computer++;\r\n                winner = computer;\r\n            } else {\r\n                score.player++;\r\n                winner = player;\r\n                // console.log(\"player wins\");\r\n            }\r\n            // Give the winning row/column/diagonal a different bg-color\r\n            let tmpAr = myGrid.getColumnIndices(i);\r\n            for (let j = 0; j < tmpAr.length; j++) {\r\n                let str = \"cell\" + tmpAr[j];\r\n                document.getElementById(str).classList.add(\"win-color\");\r\n            }\r\n            setTimeout(endGame, 1000, winner);\r\n            return winner;\r\n        }\r\n    }\r\n\r\n    // diagonals\r\n    for (i = 0; i <= 1; i++) {\r\n        let diagonal = myGrid.getDiagValues(i);\r\n        if (diagonal[0] > 0 && diagonal[0] == diagonal[1] && diagonal[0] == diagonal[2]) {\r\n            if (diagonal[0] == computer) {\r\n                score.computer++;\r\n                winner = computer;\r\n                // console.log(\"computer wins\");\r\n            } else {\r\n                score.player++;\r\n                winner = player;\r\n\r\n            }\r\n\r\n            let tmpAr = myGrid.getDiagIndices(i);\r\n            for (let j = 0; j < tmpAr.length; j++) {\r\n                let str = \"cell\" + tmpAr[j];\r\n                document.getElementById(str).classList.add(\"win-color\");\r\n            }\r\n            setTimeout(endGame, 1000, winner);\r\n            return winner;\r\n        }\r\n    }\r\n\r\n    // If we haven't returned a winner by now, if the board is full, it's a tie\r\n    let myArr = myGrid.getFreeCellIndices();\r\n    if (myArr.length === 0) {\r\n        winner = 10;\r\n        score.ties++;\r\n        endGame(winner);\r\n        return winner;\r\n    }\r\n\r\n    return winner;\r\n}\r\n\r\nfunction announceWinner(text) {\r\n    document.getElementById(\"winText\").innerHTML = text;\r\n    document.getElementById(\"winAnnounce\").style.display = \"block\";\r\n    setTimeout(closeModal, 1400, \"winAnnounce\");\r\n}\r\n\r\nfunction askUser(text) {\r\n    document.getElementById(\"questionText\").innerHTML = text;\r\n    document.getElementById(\"userFeedback\").style.display = \"block\";\r\n}\r\n\r\nfunction showOptions() {\r\n    if (player == o) {\r\n        document.getElementById(\"rx\").checked = false;\r\n        document.getElementById(\"ro\").checked = true;\r\n    } else if (player == x) {\r\n        document.getElementById(\"rx\").checked = true;\r\n        document.getElementById(\"ro\").checked = false;\r\n    }\r\n    if (difficulty === 0) {\r\n        document.getElementById(\"r0\").checked = true;\r\n        document.getElementById(\"r1\").checked = false;\r\n    } else {\r\n        document.getElementById(\"r0\").checked = false;\r\n        document.getElementById(\"r1\").checked = true;\r\n    }\r\n    document.getElementById(\"optionsDlg\").style.display = \"block\";\r\n}\r\n\r\nfunction getOptions() {\r\n    let diffs = document.getElementsByName('difficulty');\r\n    for (let i = 0; i < diffs.length; i++) {\r\n        if (diffs[i].checked) {\r\n            difficulty = parseInt(diffs[i].value);\r\n            break;\r\n            // debugger;\r\n        }\r\n    }\r\n    if (document.getElementById('rx').checked === true) {\r\n        player = x;\r\n        computer = o;\r\n        whoseTurn = player;\r\n        playerText = xText;\r\n        computerText = oText;\r\n    } else {\r\n        player = o;\r\n        computer = x;\r\n        whoseTurn = computer;\r\n        playerText = oText;\r\n        computerText = xText;\r\n        setTimeout(makeComputerMove, 400);\r\n    }\r\n    document.getElementById(\"optionsDlg\").style.display = \"none\";\r\n}\r\n\r\nfunction closeModal(id) {\r\n    document.getElementById(id).style.display = \"none\";\r\n}\r\n\r\nfunction endGame(who) {\r\n    if (who == player) {\r\n        announceWinner(\"Congratulations, you won!\");\r\n    } else if (who == computer) {\r\n        announceWinner(\"Computer wins!\");\r\n    } else {\r\n        announceWinner(\"It's a tie!\");\r\n    }\r\n    gameOver = true;\r\n    whoseTurn = 0;\r\n    moves = 0;\r\n    winner = 0;\r\n    document.getElementById(\"computer_score\").innerHTML = score.computer;\r\n    document.getElementById(\"tie_score\").innerHTML = score.ties;\r\n    document.getElementById(\"player_score\").innerHTML = score.player;\r\n    for (let i = 0; i <= 8; i++) {\r\n        let id = \"cell\" + i.toString();\r\n        document.getElementById(id).style.cursor = \"default\";\r\n    }\r\n    setTimeout(restartGame, 800);\r\n}"]}